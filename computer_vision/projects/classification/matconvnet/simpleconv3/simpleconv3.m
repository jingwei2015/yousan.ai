function net =simpleconv3()
rng('default');
rng(0) ; 

f=1/100 ;
usebatchNormalization = true ;

net.layers = {};
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(3,3,3,12, 'single'), zeros(1, 12, 'single')}}, ...
                           'stride', 1, ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(3,3,12,24, 'single'),zeros(1,24,'single')}}, ...
                           'stride', 1, ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(3,3,24,48, 'single'),zeros(1,48,'single')}}, ...
                           'stride', 1, ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;

net.layers{end+1} = struct('type', 'conv', ...
   'weights', {{f*randn(6,6,48,2, 'single'),zeros(1,2,'single')}}, ...
   'stride', 1, ...
   'pad', 0) ;


net.layers{end+1} = struct('type', 'softmaxloss') ;

net = insertBnorm(net, 1) ;
net = insertBnorm(net, 5) ;
net = insertBnorm(net, 9) ;

% Meta parameters
net.meta.inputSize = [48 48 3] ;
net.meta.trainOpts.learningRate = logspace(-2, -5, 100);
net.meta.trainOpts.numEpochs = 50 ;
net.meta.trainOpts.batchSize = 16 ;

% Fill in defaul values
net = vl_simplenn_tidy(net) ;

end

% --------------------------------------------------------------------

